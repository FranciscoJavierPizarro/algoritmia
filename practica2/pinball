#!/usr/bin/python3

################################################################################
#                                                                              #
#     Archivo: pinball.py                                                      #
#     Fecha de última revisión: 14/03/2023                                     #
#     Autores: Francisco Javier Pizarro 821259                                 #
#              Jorge Solán Morote   	816259                                 #
#     Comms:                                                                   #
#           Este archivo es el core del programa de simulación de la           #
#           práctica 2 de algoritmia básica.                                   #
#           Los parametros 1 y 2 son nombres de ficheros, el 3º parametros es  #
#           un número entre 0 y 2 para especificar el algoritmo a emplear      #
#           0 - Haskell simulado                                               #
#           1 - Haskell directo                                                #
#           2 - Python simulado                                                #
#                                                                              #
################################################################################
import time
import subprocess
import sys
from binaryTree import *
if __name__ == "__main__":
    algoritmo = 0
    comando = "./simulation "
    if (len(sys.argv) == 4):
        algoritmo = int(sys.argv[3])
    # print(sys.argv)
    if (len(sys.argv) == 3 or len(sys.argv) == 4):
        ficheroPruebas = sys.argv[1]
        ficheroSoluciones = sys.argv[2]
        with open(ficheroPruebas) as fPruebas, open(ficheroSoluciones, "w") as fSoluciones: 
            for prueba in fPruebas:
                [profundidad, n] = prueba.split()
                if algoritmo == 0:
                    resultado = subprocess.run(comando + str(profundidad) + " " + str(n) + " 0", stdout=subprocess.PIPE, shell=True, text=True).stdout
                elif algoritmo == 1:
                    resultado = subprocess.run(comando + str(profundidad) + " " + str(n), stdout=subprocess.PIPE, shell=True, text=True).stdout
                elif algoritmo == 2:
                    start = time.time()
                    resultado = str(lanzarSimulacion(int(profundidad),int(n))) +"\n"
                    end = time.time()
                    resultado = str((end - start) * 1000) + " " + resultado
                fSoluciones.write(str(resultado))


    